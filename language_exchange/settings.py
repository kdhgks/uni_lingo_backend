"""
Django settings for language_exchange project.
Generated by 'django-admin startproject' using Django 5.2.6.
"""

from pathlib import Path
from urllib.parse import urlparse
import os
from decouple import config
from datetime import timedelta

BASE_DIR = Path(__file__).resolve().parent.parent

# ----------------------------- Core -----------------------------
SECRET_KEY = config('SECRET_KEY', default="django-insecure-ie&z8yzs_ezfy_+hco#%w&7shv4w&rj=6*fj33=%sy&beb50$a")
DEBUG = config('DEBUG', default=True, cast=bool)

ALLOWED_HOSTS = config('ALLOWED_HOSTS',
    default="localhost,127.0.0.1,unilingo.duckdns.org,15.165.194.128"
).split(',')

# 프록시 뒤 HTTPS 인식
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
USE_X_FORWARDED_HOST = True

# CSRF (세션/쿠키 기반일 때만 실효적, JWT면 보통 불필요하지만 안전하게 추가)
CSRF_TRUSTED_ORIGINS = [
    "https://unilingo.duckdns.org",
    "http://unilingo.duckdns.org",
    "http://localhost:3000",
    "http://127.0.0.1:3000",
]

# ----------------------- Installed apps/mw ----------------------
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "corsheaders",
    "channels",
    "users",
    "matching",
    "chat",
    "notifications",
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",   # 최상단 근처
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "language_exchange.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "language_exchange.wsgi.application"

# ---------------------------- Database --------------------------
# .env 에 DATABASE_URL=postgresql://... 이 있으면 그걸 우선 사용
# 없으면 POSTGRES_* 개별 변수 사용, 둘 다 없으면 SQLite fallback
POSTGRES_DB = config("POSTGRES_DB", default=None)
POSTGRES_USER = config("POSTGRES_USER", default=None)
POSTGRES_PASSWORD = config("POSTGRES_PASSWORD", default=None)
POSTGRES_HOST = config("POSTGRES_HOST", default=None)
POSTGRES_PORT = config("POSTGRES_PORT", default="5432")
DATABASE_URL = config("DATABASE_URL", default=None)

if DATABASE_URL:
    parsed = urlparse(DATABASE_URL)
    DB_NAME = parsed.path.lstrip("/") or POSTGRES_DB
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": DB_NAME,
            "USER": parsed.username,
            "PASSWORD": parsed.password,
            "HOST": parsed.hostname,
            "PORT": parsed.port or "5432",
            "CONN_MAX_AGE": 60,
            "OPTIONS": {"sslmode": "require"},
        }
    }
elif all([POSTGRES_DB, POSTGRES_USER, POSTGRES_PASSWORD, POSTGRES_HOST]):
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": POSTGRES_DB,
            "USER": POSTGRES_USER,
            "PASSWORD": POSTGRES_PASSWORD,
            "HOST": POSTGRES_HOST,
            "PORT": POSTGRES_PORT,
            "CONN_MAX_AGE": 60,
            "OPTIONS": {"sslmode": "require"},
        }
    }
else:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }

# -------------------------- Auth / i18n -------------------------
AUTH_PASSWORD_VALIDATORS = [
    {"NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"},
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]
LANGUAGE_CODE = "ko-kr"
TIME_ZONE = "Asia/Seoul"
USE_I18N = True
USE_TZ = True
AUTH_USER_MODEL = 'users.User'
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# ------------------------ Static / Media ------------------------
STATIC_URL = "/static/"
STATIC_ROOT = "/static"        # collectstatic 대상(컨테이너)

MEDIA_URL = "/media/"
MEDIA_ROOT = "/media"          # 업로드 저장(컨테이너)

# ----------------------------- CORS -----------------------------
# credentials를 쓰려면 ALL_ORIGINS=False + 화이트리스트 지정
CORS_ALLOW_ALL_ORIGINS = False
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    "https://uni-lingo-client.vercel.app",
    "https://unilingo.duckdns.org",
    "http://unilingo.duckdns.org",
]
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_HEADERS = [
    'accept','accept-encoding','authorization','content-type','dnt',
    'origin','user-agent','x-csrftoken','x-requested-with',
]
CORS_ALLOW_METHODS = ['DELETE','GET','OPTIONS','PATCH','POST','PUT']
CORS_PREFLIGHT_MAX_AGE = 86400

# ------------------------ DRF / JWT / ASGI ----------------------
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ],
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(hours=24),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': True,
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'TOKEN_TYPE_CLAIM': 'token_type',
    'TOKEN_USER_CLASS': 'rest_framework_simplejwt.models.TokenUser',
    'JTI_CLAIM': 'jti',
    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),
}

ASGI_APPLICATION = 'language_exchange.asgi.application'
CHANNEL_LAYERS = {'default': {'BACKEND': 'channels.layers.InMemoryChannelLayer'}}
